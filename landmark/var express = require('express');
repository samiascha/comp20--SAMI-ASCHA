var express = require('express');
var bodyParser = require('body-parser');
var validator = require('validator');
var app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
var compress = require('compression');
app.use(compress());

var mongoUri = process.env.MONGODB_URI || process.env.MONGOLAB_URI || process.env.MONGOHQ_URL;
 
var MongoClient = require('mongodb').MongoClient, format = require('util').format;
var db = MongoClient.connect(mongoUri, function(error, databaseConnection) {
	db = databaseConnection;
});

app.post('/sendLocation', function(request, response) {
	response.header("Access-Control-Allow-Origin", "*");
	response.header("Access-Control-Allow-Headers", "X-Requested-With");

	var login = request.body.login;
	var lat = request.body.lat;
	var lng = request.body.lng;
	var results = {};
	if (login != undefined && lat != undefined && lng != undefined && validator.isFloat(lat) && validator.isFloat(lng)) {
		lat = parseFloat(lat);
		lng = parseFloat(lng);
		if (lat >= -90.0 && lat <= 90 && lng >= -180 && lng <= 180) {
			var toInsert = {
				"login":login,
				"lat":lat,
				"lng":lng,
				"created_at":new Date()
			};
			db.collection('locations', function(error, collection) {
				collection.insert(toInsert, function (errorUpdate, result) {
					if (!error) {
						collection.find().sort({"_id":-1}).toArray(function(errorQuery, people) {
							if (!errorQuery) {
								results.people = people;
								db.collection('landmarks').createIndex({'geometry':"2dsphere"}, function(errorCreatingIndex, indexOutput) {
									if (!errorCreatingIndex) {
										db.collection('landmarks', function(error, collection) {
											collection.find({geometry:{$near:{$geometry:{type:"Point",coordinates:[lng,lat]},$minDistance: 0,$maxDistance: 1500}}}).toArray(function(errorFindingLandmarks, nearestLandmarks) {
												if (!errorFindingLandmarks) {
													results.landmarks = nearestLandmarks;
													response.send(results);
												}
												else {
													response.send('{"error":"Whoops, something went wrong finding nearest landmarks"}');
												}
											});
										});
									}
									else {
										response.send('{"error":"Whoops, something went wrong creating index of landmarks"}');
									}
								});
							}
							else {
								response.send('{"error":"Whoops, something is wrong with the database connection"}');
							}
						});
					}
					else {
						response.send('{"error":"Whoops, something is wrong with the database connection"}');
					}
				});
			});
		}
		else {
			response.send('{"error":"Whoops, something is wrong with your data!"}');
		}
	}
	else {
		response.send('{"error":"Whoops, something is wrong with your data!"}');
	}
});